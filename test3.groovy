import aiohttp
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
import uuid
import logging
import asyncio

# Thi·∫øt l·∫≠p logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# H√†m ki·ªÉm tra ID Facebook v√† l·∫•y th√¥ng tin c√¥ng khai
async def check_facebook_id(fb_id: str, retries: int = 2) -> str:
    session_id = str(uuid.uuid4())
    for attempt in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://www.facebook.com/{fb_id}"
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                    'Sec-Fetch-Mode': 'navigate',
                    'Sec-Fetch-Site': 'none',
                    'Sec-Fetch-User': '?1'
                }
                logger.info(f"Session {session_id}: Attempt {attempt + 1} checking {url}")
                async with session.get(url, headers=headers, timeout=20) as response:
                    text = await response.text()
                    logger.info(f"Session {session_id}: Status {response.status}, Response snippet: {text[:200]}")
                    if response.status == 200:
                        # Ph√¢n t√≠ch HTML ƒë·ªÉ l·∫•y th√¥ng tin c√¥ng khai
                        soup = BeautifulSoup(text, 'html.parser')
                        
                        # Ki·ªÉm tra l·ªói trang kh√¥ng t·ªìn t·∫°i
                        if any(phrase in text for phrase in ["This content isn't available", "Page Not Found", "Sorry, something went wrong"]):
                            return f"ID {fb_id}: T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a."
                        
                        # L·∫•y th√¥ng tin c√¥ng khai
                        info = {"ID": fb_id, "Status": "T√†i kho·∫£n c√≤n s·ªëng"}
                        
                        # T√™n hi·ªÉn th·ªã
                        title_tag = soup.find('title')
                        if title_tag and title_tag.text != "Facebook":
                            info["Name"] = title_tag.text.strip()
                        
                        # ·∫¢nh ƒë·∫°i di·ªán
                        img_tag = soup.find('meta', property='og:image')
                        if img_tag and img_tag.get('content'):
                            info["Profile Picture"] = img_tag['content']
                        
                        # Th√¥ng tin gi·ªõi thi·ªáu
                        intro_tags = soup.find_all('div', class_=lambda x: x and 'intro' in x.lower())
                        intro_text = []
                        for tag in intro_tags:
                            text = tag.get_text(strip=True)
                            if text:
                                intro_text.append(text)
                        if intro_text:
                            info["Intro"] = " | ".join(intro_text[:2])
                        
                        # B√†i ƒëƒÉng ghim
                        pinned_post = soup.find('div', class_=lambda x: x and 'pinned' in x.lower())
                        if pinned_post:
                            pinned_text = pinned_post.get_text(strip=True)[:200]  # Gi·ªõi h·∫°n ƒë·ªô d√†i
                            if pinned_text:
                                info["Pinned Post"] = pinned_text
                        
                        # Tr·∫°ng th√°i m·ªõi nh·∫•t (th·ª≠ l·∫•y b√†i ƒëƒÉng ƒë·∫ßu ti√™n)
                        post = soup.find('div', class_=lambda x: x and 'userContent' in x.lower())
                        if post:
                            post_text = post.get_text(strip=True)[:200]
                            if post_text:
                                info["Latest Status"] = post_text
                        
                        # Nh·∫°c ghim (r·∫•t kh√≥, th·ª≠ t√¨m meta ho·∫∑c th·∫ª li√™n quan)
                        music_tag = soup.find('meta', property='music:song')
                        if music_tag and music_tag.get('content'):
                            info["Pinned Music"] = music_tag['content']
                        
                        # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
                        result = f"ID {fb_id}: T√†i kho·∫£n c√≤n s·ªëng.\n"
                        for key, value in info.items():
                            if key != "Status":
                                result += f"{key}: {value}\n"
                        if not any(k in info for k in ["Pinned Post", "Latest Status", "Pinned Music"]):
                            result += "Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng ghim, tr·∫°ng th√°i, ho·∫∑c nh·∫°c c√¥ng khai.\n"
                        return result.strip()
                    
                    elif response.status == 404:
                        return f"ID {fb_id}: T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i."
                    elif response.status == 403:
                        return f"ID {fb_id}: B·ªã ch·∫∑n b·ªüi Facebook (m√£ l·ªói: 403)."
                    elif response.status == 400:
                        return f"ID {fb_id}: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá (m√£ l·ªói: 400). C√≥ th·ªÉ ID kh√¥ng ƒë√∫ng ho·∫∑c b·ªã h·∫°n ch·∫ø."
                    else:
                        return f"ID {fb_id}: Kh√¥ng th·ªÉ ki·ªÉm tra (m√£ l·ªói: {response.status})."
        except aiohttp.ClientError as e:
            logger.error(f"Session {session_id}: Error checking {fb_id} - {str(e)}")
            if attempt < retries - 1:
                logger.info(f"Session {session_id}: Retrying after 5 seconds...")
                await asyncio.sleep(5)
                continue
            return f"ID {fb_id}: L·ªói khi ki·ªÉm tra - {str(e)}"
        finally:
            await asyncio.sleep(3)
    return f"ID {fb_id}: Kh√¥ng th·ªÉ ki·ªÉm tra sau {retries} l·∫ßn th·ª≠."

# H√†m x·ª≠ l√Ω l·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã Ch√†o b·∫°n! T√¥i l√† bot ki·ªÉm tra tr·∫°ng th√°i ID Facebook.\n"
        "G·ª≠i ID ho·∫∑c t√™n ng∆∞·ªùi d√πng (v√≠ d·ª•: 'zuck' ho·∫∑c '100000123456789').\n"
        "T√¥i s·∫Ω ki·ªÉm tra tr·∫°ng th√°i v√† th√¥ng tin c√¥ng khai (n·∫øu c√≥), nh∆∞ t√™n, ·∫£nh, b√†i ghim, ho·∫∑c tr·∫°ng th√°i.\n"
        "D√πng /help ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
    )

# H√†m x·ª≠ l√Ω l·ªánh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìñ H∆∞·ªõng d·∫´n:\n"
        "- G·ª≠i ID Facebook ho·∫∑c t√™n ng∆∞·ªùi d√πng ƒë·ªÉ ki·ªÉm tra.\n"
        "- T√¥i s·∫Ω b√°o tr·∫°ng th√°i t√†i kho·∫£n v√† th√¥ng tin c√¥ng khai (n·∫øu c√≥), nh∆∞ t√™n, ·∫£nh ƒë·∫°i di·ªán, b√†i ghim, tr·∫°ng th√°i, ho·∫∑c nh·∫°c.\n"
        "- V√≠ d·ª•: 'zuck' ho·∫∑c '100000123456789'.\n"
        "- L∆∞u √Ω: T√†i kho·∫£n ri√™ng t∆∞ c√≥ th·ªÉ kh√¥ng hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt."
    )

# H√†m x·ª≠ l√Ω tin nh·∫Øn
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    fb_id = update.message.text.strip()
    if not fb_id:
        await update.message.reply_text("‚ùå Vui l√≤ng g·ª≠i ID Facebook h·ª£p l·ªá.")
        return
    
    result = await check_facebook_id(fb_id)
    await update.message.reply_text(result)

def main() -> None:
    # Thay b·∫±ng token c·ªßa b·∫°n
    TOKEN = "7721420080:AAFV7vhPMojQWYeTBCfVAPuxpqYW_09Ym2U"
    
    # Kh·ªüi t·∫°o bot
    application = Application.builder().token(TOKEN).build()
    
    # ƒêƒÉng k√Ω l·ªánh
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Ch·∫°y bot
    logger.info("Bot ƒëang kh·ªüi ƒë·ªông...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()